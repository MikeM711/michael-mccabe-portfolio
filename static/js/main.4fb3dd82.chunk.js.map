{"version":3,"sources":["nav-items/nav-home.tsx","nav-items/navbar.tsx","App.tsx","serviceWorker.ts","index.tsx","img/michael-pic.png"],"names":["NavHome","className","src","profileImage","alt","style","filter","NavBar","useEffect","elem","document","querySelectorAll","M","Tabs","init","href","icon","faHome","faToolbox","faCode","faLayerGroup","faChartBar","faBolt","App","useState","window","innerWidth","windowSize","setWindowSize","isMobile","React","addEventListener","id","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"yTA0BeA,EAvBW,WACxB,OACE,yBAAKC,UAAU,YACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,gBACb,8CACA,uBAAGA,UAAU,aAAb,uCACA,uBAAGA,UAAU,aAAb,0BAGJ,yBAAKA,UAAU,cACb,yBACEC,IAAKC,IACLC,IAAI,gBACJC,MAAO,CAAEC,OAAQ,0B,8BCmDdC,G,MA9DU,WAQvB,OAPAC,qBAAU,WAER,IAAMC,EAAOC,SAASC,iBAAiB,SAEtBC,IAAEC,KAAKC,KAAKL,EADb,MAEf,IAGD,yBAAKR,UAAU,eACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,WACb,wBAAIA,UAAU,QACZ,wBAAIA,UAAU,cACZ,uBAAGA,UAAU,cAAcc,KAAK,SAC9B,sCACA,kBAAC,IAAD,CAAiBd,UAAU,aAAae,KAAMC,QAIlD,wBAAIhB,UAAU,cACZ,uBAAGc,KAAK,eACR,4CACE,kBAAC,IAAD,CAAiBd,UAAU,mBAAmBe,KAAME,QAIxD,wBAAIjB,UAAU,cACZ,uBAAGc,KAAK,gBACR,6CACE,kBAAC,IAAD,CAAiBd,UAAU,oBAAoBe,KAAMG,QAIzD,wBAAIlB,UAAU,cACZ,uBAAGc,KAAK,aACR,0CACE,kBAAC,IAAD,CAAiBd,UAAU,iBAAiBe,KAAMI,QAItD,wBAAInB,UAAU,cACZ,uBAAGc,KAAK,kBACN,+CACA,kBAAC,IAAD,CAAiBd,UAAU,sBAAsBe,KAAMK,QAI3D,wBAAIpB,UAAU,cACZ,uBAAGc,KAAK,YACR,yCACA,kBAAC,IAAD,CAAiBd,UAAU,gBAAgBe,KAAMM,cCnBhDC,G,MAjCO,WAAO,IAAD,EACUC,mBAAiBC,OAAOC,YADlC,mBACnBC,EADmB,KACPC,EADO,KAEpBC,EAAoBF,EAAa,KAavC,OAXAG,IAAMtB,WAAU,WAIdiB,OAAOM,iBAAiB,UAAU,kBAAMH,EAAcH,OAAOC,iBAK5D,IAGD,yBAAKM,GAAG,MAAM/B,UAAU,aACrB4B,EACC,6CAEA,yBAAK5B,UAAU,YACb,yBAAKA,UAAU,+BACb,yBAAKA,UAAU,WACb,kBAAC,EAAD,MACA,kBAAC,EAAD,YClBMgC,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7B,SAAS8B,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEjJ5BC,EAAOC,QAAU,IAA0B,0C","file":"static/js/main.4fb3dd82.chunk.js","sourcesContent":["import React from \"react\";\nimport profileImage from \"../img/michael-pic.png\";\n\nconst NavHome: React.FC = () => {\n  return (\n    <div className=\"nav-home\">\n      <div className=\"card horizontal\">\n        <div className=\"card-stacked\">\n          <div className=\"card-content\">\n            <h3>Michael McCabe</h3>\n            <p className=\"my-status\">Software Developer Master's Student</p>\n            <p className=\"my-status\">at Boston University</p>\n          </div>\n        </div>\n        <div className=\"card-image\">\n          <img\n            src={profileImage}\n            alt=\"profile-image\"\n            style={{ filter: \"brightness(100%)\" }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NavHome;\n","import React, { useEffect } from \"react\";\nimport M from \"materialize-css\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'; \nimport { faBolt, faChartBar, faCode, faHome, faLayerGroup, faToolbox } from '@fortawesome/free-solid-svg-icons';\n\nimport './navbar.css';\n\nconst NavBar: React.FC = () => {\n  useEffect(() => {\n    // tabs initialization\n    const elem = document.querySelectorAll(\".tabs\");\n    const options = {};\n    const instance = M.Tabs.init(elem, options);\n  }, []);\n\n  return (\n    <div className=\"site-navbar\">\n      <div className=\"row\">\n        <div className=\"col s12\">\n          <ul className=\"tabs\">\n            <li className=\"tab col l2\">\n              <a className=\"active home\" href=\"#home\">\n                <span>Home</span>\n                <FontAwesomeIcon className=\"home fa-3x\" icon={faHome} />\n              </a>\n            </li>\n\n            <li className=\"tab col l2\">\n              <a href=\"#experience\">\n              <span>Experience</span>\n                <FontAwesomeIcon className=\"experience fa-3x\" icon={faToolbox} />\n              </a>\n            </li>\n\n            <li className=\"tab col l2\">\n              <a href=\"#open-source\">\n              <span>Open Source</span>\n                <FontAwesomeIcon className=\"open-source fa-3x\" icon={faCode} />\n              </a>\n            </li>\n\n            <li className=\"tab col l2\">\n              <a href=\"#projects\">\n              <span>Projects</span>\n                <FontAwesomeIcon className=\"projects fa-3x\" icon={faLayerGroup} />\n              </a>\n            </li>\n\n            <li className=\"tab col l2\">\n              <a href=\"#presentations\">\n                <span>Presentations</span>\n                <FontAwesomeIcon className=\"presentations fa-3x\" icon={faChartBar} />\n              </a>\n            </li>\n\n            <li className=\"tab col l2\">\n              <a href=\"#current\">\n              <span>Current</span>\n              <FontAwesomeIcon className=\"current fa-3x\" icon={faBolt} />\n              </a>\n            </li>\n\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NavBar;\n","import React, { useState, useEffect } from \"react\";\n\nimport NavHome from \"./nav-items/nav-home\";\nimport NavBar from \"./nav-items/navbar\";\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n  const [windowSize, setWindowSize] = useState<number>(window.innerWidth);\n  const isMobile: boolean = windowSize < 1042;\n\n  React.useEffect(() => {\n    // https://blog.logrocket.com/developing-responsive-layouts-with-react-hooks/\n    /* Inside of a \"useEffect\" hook add an event listener that updates\n       the \"width\" state variable when the window size changes */\n    window.addEventListener(\"resize\", () => setWindowSize(window.innerWidth));\n\n    /* passing an empty array as the dependencies of the effect will cause this\n       effect to only run when the component mounts, and not each time it updates.\n       We only want the listener to be added once */\n  }, []);\n\n  return (\n    <div id=\"app\" className=\"container\">\n      {isMobile ? (\n        <div>Hello mobile</div>\n      ) : (\n        <div className=\"computer\">\n          <div className=\"row nav-main valign-wrapper\">\n            <div className=\"col l12\">\n              <NavBar />\n              <NavHome />\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/michael-pic.a2d217b4.png\";"],"sourceRoot":""}